<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://kmhk-naka.github.io/</id><title>Kmhk.N</title><subtitle>Kmhk.Nの備忘録ブログです．</subtitle> <updated>2021-06-30T14:01:55+09:00</updated> <author> <name>Kimihiko Nakahara</name> <uri>https://kmhk-naka.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://kmhk-naka.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://kmhk-naka.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Kimihiko Nakahara </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Python用 Slack公式 SDK の slack_sdk を使ってシミュレーション終了の通知を画像とともにお知らせする</title><link href="https://kmhk-naka.github.io/posts/slack-sdk-from-python/" rel="alternate" type="text/html" title="Python用 Slack公式 SDK の slack_sdk を使ってシミュレーション終了の通知を画像とともにお知らせする" /><published>2021-06-30T00:00:00+09:00</published> <updated>2021-06-30T10:05:21+09:00</updated> <id>https://kmhk-naka.github.io/posts/slack-sdk-from-python/</id> <content src="https://kmhk-naka.github.io/posts/slack-sdk-from-python/" /> <author> <name>Kimihiko Nakahara</name> </author> <category term="Blogging" /> <category term="Tutorial" /> <summary> はじめに 強化学習シミュレーションが終了した際にSlackに通知させる方法を調べていたら，Slack公式のSDKがあることを知ったので使ってみました． Slackアプリを作成する際にマニフェストを用いて作成する方法がありますが，ベータ版ということもあり本稿では使用しないので注意してください．また，Pythonでの実装を説明する際に，プロジェクトの作成や仮想環境の構築については省略させていただきます． 公式の開発者の方がQiitaにチュートリアル記事を公開しているので参照してみてください． やりたいこと 今回実装したい機能は以下のようなものです． シミュレーション終了時にSlackに通知 シミュレーション終了時のログをメッセージとして送信 シミュレーション結果を概観できる画像を送信 これらの目的を達成する手段として，WebClient.files_upload... </summary> </entry> <entry><title>VSCodeを使うならとりあえずインストールしてほしい拡張機能と設定変更</title><link href="https://kmhk-naka.github.io/posts/VSCode-extensions/" rel="alternate" type="text/html" title="VSCodeを使うならとりあえずインストールしてほしい拡張機能と設定変更" /><published>2021-05-08T15:00:00+09:00</published> <updated>2021-05-08T15:45:34+09:00</updated> <id>https://kmhk-naka.github.io/posts/VSCode-extensions/</id> <content src="https://kmhk-naka.github.io/posts/VSCode-extensions/" /> <author> <name>Kimihiko Nakahara</name> </author> <category term="Blogging" /> <category term="Tutorial" /> <summary> はじめに 本稿は研究室のメンバーに向けて作成しますが，誰にでも参考になると思うので公開しようと思います． ビデオ会議などでVSCodeの画面を共有して質問やレビューを受ける時に，特にインストールしておいてほしい拡張機能や設定変更ついて列挙していきます． 拡張機能については，特に嫌いな理由が無ければインストールしておくと助かります． 可読性 テーマ お気に入りのテーマを見つけて設定しましょう． このサイトから探してみるのも良いかもしれません． 個人的なおすすめは次の2つです． Dracula Official GitHub Theme ( GitHub Dark Dimmed ) indent-rainbow インデントをレインボーで装飾してくれる拡張機能です． Pythonのようにインデントが意味を持つプログラミング言語では必須と言っても過言で... </summary> </entry> <entry><title>【Python】OpenCVでキャプチャしたフレームを保存する</title><link href="https://kmhk-naka.github.io/posts/OpenCV-capture-frames/" rel="alternate" type="text/html" title="【Python】OpenCVでキャプチャしたフレームを保存する" /><published>2021-01-20T19:51:00+09:00</published> <updated>2021-01-21T02:22:44+09:00</updated> <id>https://kmhk-naka.github.io/posts/OpenCV-capture-frames/</id> <content src="https://kmhk-naka.github.io/posts/OpenCV-capture-frames/" /> <author> <name>Kimihiko Nakahara</name> </author> <category term="Blogging" /> <category term="Tutorial" /> <summary> はじめに Object Detectionをやりたくて，そのための訓練データを集めるためにWebカメラで撮影することにしました． その際に作成したコードを公開しようと思います． 本稿では，OpenCVが利用可能な状態を前提としていて，環境構築については説明しませんのでご了承ください． 実行環境 Ubuntu 20.04 LTS Python 3.8.5 opencv-python 4.5.1 ライブラリの読み込み このスクリプトで必要になるライブラリをインポートします． argparse については次のセクションで簡単に説明します． import argparse import time import uuid from pathlib import Path import cv2 ArgumentParserを使ったオプションの処理 argpars... </summary> </entry> <entry><title>IntelliJでKotlinとJavaFX 11を使った開発環境の構築</title><link href="https://kmhk-naka.github.io/posts/IntelliJ-Kotlin-plus-JavaFX11/" rel="alternate" type="text/html" title="IntelliJでKotlinとJavaFX 11を使った開発環境の構築" /><published>2020-12-14T15:15:00+09:00</published> <updated>2020-12-14T15:15:00+09:00</updated> <id>https://kmhk-naka.github.io/posts/IntelliJ-Kotlin-plus-JavaFX11/</id> <content src="https://kmhk-naka.github.io/posts/IntelliJ-Kotlin-plus-JavaFX11/" /> <author> <name>Kimihiko Nakahara</name> </author> <category term="Blogging" /> <category term="Tutorial" /> <summary> Java SDK 11からJavaFXが切り離された JavaFXはJDK 11からスタンドアローンなモジュールとして配布されるようになりました． そのため，JDKとは別にインストールする必要があります． インストールについては以下のドキュメントを参照してください． Getting Started with JavaFX 環境情報 Xubuntu 20.04 IntelljJ IDEA 2020.03 (Community Edition) OpenJDK 11 JavaFX 11 JavaFX ライブラリの追加 IntelliJにJavaFX ライブラリを認識させるために，PATHの指定をする必要があります． メインメニューからFile &amp;gt; Project Structure…(Ctrl+Shift+Alt+S)を選択します． ... </summary> </entry> <entry><title>【論文読み】HyperNEAT-GGP&amp;#58; A HyperNEAT-based Atari General Game Player</title><link href="https://kmhk-naka.github.io/posts/A-HyperNEAT-based-Atari-General-Game-Player/" rel="alternate" type="text/html" title="【論文読み】HyperNEAT-GGP&amp;#58; A HyperNEAT-based Atari General Game Player" /><published>2020-12-12T20:21:00+09:00</published> <updated>2020-12-12T20:21:00+09:00</updated> <id>https://kmhk-naka.github.io/posts/A-HyperNEAT-based-Atari-General-Game-Player/</id> <content src="https://kmhk-naka.github.io/posts/A-HyperNEAT-based-Atari-General-Game-Player/" /> <author> <name>Kimihiko Nakahara</name> </author> <category term="論文" /> <category term="Survey" /> <summary> 論文情報 Hausknecht, Matthew, et al. “HyperNEAT-GGP: A HyperNEAT-based Atari general game player.” Proceedings of the 14th annual conference on Genetic and evolutionary computation. 2012. DOI: https://doi.org/10.1145/2330163.2330195 Google Scholar: HyperNEAT-GGP: A HyperNEAT-based Atari general game player なぜ読もうと思ったか？ Google Scholarで「HyperNEAT」と検索するとトップに出てきたので． どんなもの？ Visual Processingアーキテクチャによ... </summary> </entry> </feed>
